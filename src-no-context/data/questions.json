{
  "questions": [
    {
      "question": "What pattern is used in React to enhance component composition and reuse logic across components?",
      "options": [
        "Higher-Order Components",
        "Render Props",
        "Context API",
        "React Hooks"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "How can you optimize performance for a list of elements in React?",
      "options": [
        "Using the PureComponent",
        "Implementing shouldComponentUpdate",
        "Using React.memo for functional components",
        "All of the above"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "Which hook is best for managing complex state logic that involves multiple sub-values?",
      "options": ["useState", "useReducer", "useContext", "useEffect"],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "In a React-Redux application, how do you access the store's state within a component?",
      "options": [
        "useDispatch()",
        "connect()",
        "useSelector()",
        "getAppState()"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the main difference between React's Context API and Redux?",
      "options": [
        "Context API cannot manage state",
        "Redux is strictly for local state management",
        "Context API is for global state management, Redux provides predictable state management across components",
        "There is no difference"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "How does React's Suspense component help with component loading?",
      "options": [
        "Pauses rendering for fetching data",
        "Delays rendering for child components until a condition is met",
        "Automatically splits code at different points",
        "Manages priority of state updates"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "Which method should be used to batch multiple state updates into a single re-render for performance optimization?",
      "options": [
        "ReactDOM.flushSync()",
        "React.unstable_batchedUpdates()",
        "setState()",
        "useEffect() with empty dependencies"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "What is the primary use case for the useLayoutEffect hook?",
      "options": [
        "Data fetching",
        "Synchronous DOM mutations",
        "Asynchronous updates",
        "State management"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "How can you prevent unnecessary re-renders in a component that accepts a complex object as a prop?",
      "options": [
        "Using shouldComponentUpdate",
        "Using React.PureComponent",
        "Using React.memo with a custom comparison function",
        "None of the above"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "Which is the correct approach to handle form inputs in React?",
      "options": [
        "Uncontrolled components",
        "Controlled components",
        "Both A and B are correct",
        "Using the useForm hook"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Which is the most popular JavaScript framework?",
      "options": ["Angular", "React", "Svelte", "Vue"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which company invented React?",
      "options": ["Google", "Apple", "Netflix", "Facebook"],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What's the fundamental building block of React apps?",
      "options": ["Components", "Blocks", "Elements", "Effects"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What's the name of the syntax we use to describe the UI in React components?",
      "options": ["FBJ", "Babel", "JSX", "ES2015"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How does data flow naturally in React apps?",
      "options": [
        "From parents to children",
        "From children to parents",
        "Both ways",
        "The developers decides"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "How to pass data into a child component?",
      "options": ["State", "Props", "PropTypes", "Parameters"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "When to use derived state?",
      "options": [
        "Whenever the state should not trigger a re-render",
        "Whenever the state can be synchronized with an effect",
        "Whenever the state should be accessible to all components",
        "Whenever the state can be computed from another state variable"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What triggers a UI re-render in React?",
      "options": [
        "Running an effect",
        "Passing props",
        "Updating state",
        "Adding event listeners to DOM elements"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "When do we directly \"touch\" the DOM in React?",
      "options": [
        "When we need to listen to an event",
        "When we need to change the UI",
        "When we need to add styles",
        "Almost never"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "In what situation do we use a callback to update state?",
      "options": [
        "When updating the state will be slow",
        "When the updated state is very data-intensive",
        "When the state update should happen faster",
        "When the new state depends on the previous state"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "If we pass a function to useState, when will that function be called?",
      "options": [
        "On each re-render",
        "Each time we update the state",
        "Only on the initial render",
        "The first time we update the state"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "Which hook to use for an API request on the component's initial render?",
      "options": ["useState", "useEffect", "useRef", "useReducer"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which variables should go into the useEffect dependency array?",
      "options": [
        "Usually none",
        "All our state variables",
        "All state and props referenced in the effect",
        "All variables needed for clean up"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "An effect will always run on the initial render.",
      "options": [
        "True",
        "It depends on the dependency array",
        "False",
        "In depends on the code in the effect"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "When will an effect run if it doesn't have a dependency array?",
      "options": [
        "Only when the component mounts",
        "Only when the component unmounts",
        "The first time the component re-renders",
        "Each time the component is re-rendered"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is a key in React lists?",
      "options": [
        "A way to make elements faster",
        "An identifier for list items",
        "A type of prop",
        "A method for updating state"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What does the useContext Hook do?",
      "options": [
        "Manages the app's context",
        "Fetches data from an API",
        "Creates a new context",
        "Consumes and subscribes to React context"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What is Redux primarily used for?",
      "options": [
        "Managing global state",
        "Styling components",
        "Data fetching",
        "Managing local state"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Which hook is used to memorize a value?",
      "options": ["useState", "useEffect", "useMemo", "useCallback"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What does 'lifting state up' mean in React?",
      "options": [
        "Moving state to Redux",
        "Deleting state from a component",
        "Moving state to a parent component",
        "Storing state in local storage"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What does 'prop drilling' refer to?",
      "options": [
        "Passing props to deep child components",
        "A method to style components",
        "A pattern for state management",
        "Drilling holes in components for ventilation"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Which hook is used to perform side effects in function components?",
      "options": ["useState", "useEffect", "useContext", "useReducer"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What's the purpose of React Router?",
      "options": [
        "To manage state",
        "To connect to APIs",
        "To navigate between pages",
        "To style components"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What does the useRef Hook return?",
      "options": [
        "A unique identifier",
        "A state variable",
        "A function to update state",
        "A mutable ref object"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "How do you create a new React project using Create React App?",
      "options": [
        "npm install create-react-app",
        "create-react-app my-app",
        "npm start new-react-app",
        "npx create-react-app my-app"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "Which of the following is not a valid React hook?",
      "options": ["useReducer", "useRef", "useFetch", "useContext"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the purpose of the Fragment component in React?",
      "options": [
        "To keep the DOM clean of unnecessary nodes",
        "To fetch data from an API",
        "To manage global state",
        "To handle form submission"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What is the virtual DOM?",
      "options": [
        "A DOM manipulation library",
        "A copy of the real DOM that React uses to increase performance",
        "A tool for virtual reality development",
        "A server-side rendering technique"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which method in a React Component is called after the component renders for the first time?",
      "options": [
        "componentDidMount",
        "componentWillMount",
        "componentDidUpdate",
        "render"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "In React, what is used to pass data to a component from outside?",
      "options": ["setState", "render with arguments", "PropTypes", "props"],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "Which of the following is a correct way to create a component?",
      "options": [
        "Class MyComponent extends React.Component {}",
        "function MyComponent() {}",
        "Both A and B",
        "React.createComponent(MyComponent)"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How do functional components handle state?",
      "options": [
        "Using the useState hook",
        "They can't handle state",
        "Using the setState method",
        "Through class inheritance"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Which hook automatically cleans up subscriptions or side effects?",
      "options": ["useEffect", "useLayoutEffect", "useMemo", "useCallback"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What is the primary role of the React Router library?",
      "options": [
        "State management",
        "Data binding",
        "Declarative routing",
        "Component styling"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What does the term 'lifting state up' refer to in React?",
      "options": [
        "Moving state to a parent component to share between siblings",
        "Increasing the size of the state for better performance",
        "Storing state in a cloud service",
        "Enhancing the state with additional properties"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What is the key benefit of using TypeScript with React components?",
      "options": [
        "Type safety for props, state, and event handlers",
        "Automatic testing of components",
        "Improved performance at runtime",
        "Easier integration with third-party libraries"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Which React Hook is used to memorize a value across renders?",
      "options": ["useCallback", "useMemo", "useRef", "useState"],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "How can you create a context in React?",
      "options": [
        "React.createContext()",
        "new ReactContext()",
        "React.Context()",
        "Context.create()"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "What does the term 'lifting state up' in React refer to?",
      "options": [
        "Moving state to Redux",
        "Sharing state between components by moving it to their common ancestor",
        "Storing state in local storage",
        "Increasing the size of the state object"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "In React, what is a 'side effect'?",
      "options": [
        "An error in the component rendering",
        "Operations like data fetching, subscriptions, or manually changing the DOM that don't fit into React's lifecycle methods",
        "A visual effect added to components for better UX",
        "A part of the Redux state management"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Which method in a class component is called right before the component is unmounted and destroyed?",
      "options": [
        "componentWillUnmount()",
        "componentDidMount()",
        "shouldComponentUpdate()",
        "componentWillUpdate()"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "How do you prevent a function from being called too quickly or too many times in a row in React?",
      "options": [
        "Throttling",
        "Debouncing",
        "Both A and B",
        "usePrevent() hook"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "Which of the following is not a valid way to handle forms in React?",
      "options": [
        "Using controlled components",
        "Using uncontrolled components",
        "Using the Formik library",
        "Direct manipulation of the DOM"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is the purpose of the 'key' prop in a list of React elements?",
      "options": [
        "To enhance performance by helping React identify which items have changed",
        "To ensure the list is accessible",
        "To define a unique style for each element",
        "To prevent XSS attacks"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "What is the main use of the React Profiler?",
      "options": [
        "Debugging component errors",
        "Measuring the performance of React application components",
        "Enhancing SEO of React applications",
        "Automatically fixing bugs in the application"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "What feature does React 18 introduce to improve performance by delaying state updates to offscreen components?",
      "options": [
        "Concurrent Rendering",
        "Suspense List",
        "Automatic Batching",
        "Offscreen API"
      ],
      "correctOption": 3,
      "points": 40
    },
    {
      "question": "How does the 'useImperativeHandle' hook differ from 'useRef' in React?",
      "options": [
        "It allows you to modify the value of a ref within a child component",
        "It is used exclusively for DOM elements",
        "There's no difference, it's an alias for useRef",
        "It exposes parent components' functions to child components"
      ],
      "correctOption": 0,
      "points": 40
    },
    {
      "question": "Which API provides a way to perform layout measurements and observe changes to the size of a DOM element in React?",
      "options": [
        "MutationObserver API",
        "IntersectionObserver API",
        "ResizeObserver API",
        "PerformanceObserver API"
      ],
      "correctOption": 2,
      "points": 40
    },
    {
      "question": "In React, what pattern allows a child component to expose a method to a parent component?",
      "options": [
        "Component Inversion",
        "Prop Drilling",
        "Render Props",
        "Controlled Components"
      ],
      "correctOption": 2,
      "points": 40
    },
    {
      "question": "How can you implement code-splitting in your React application?",
      "options": [
        "Using the React.lazy function with Suspense",
        "Using the split() method on components",
        "Directly within the Webpack configuration",
        "All components are automatically code-split in React"
      ],
      "correctOption": 0,
      "points": 40
    },
    {
      "question": "What is the primary use case for the 'useDebugValue' hook in React?",
      "options": [
        "Debugging performance issues",
        "Adding custom hooks to the React DevTools",
        "Displaying the current state and props",
        "Monitoring the lifecycle of a component"
      ],
      "correctOption": 1,
      "points": 40
    },
    {
      "question": "Which of the following is not a recommended way to handle errors in React components?",
      "options": [
        "Error Boundaries",
        "try...catch in lifecycle methods",
        "Using the onError event handler",
        "Throwing errors in the render method"
      ],
      "correctOption": 3,
      "points": 40
    },
    {
      "question": "What does the term 'hydration' refer to in a React application?",
      "options": [
        "Refreshing the page when the state changes",
        "Attaching event listeners to elements during the initial load of a server-rendered app",
        "The process of splitting code into smaller chunks",
        "Updating the state based on changes to props"
      ],
      "correctOption": 1,
      "points": 40
    },
    {
      "question": "Which tool can be used alongside React for state management and is known for its simplicity compared to Redux?",
      "options": ["MobX", "Apollo Client", "React Query", "Zustand"],
      "correctOption": 3,
      "points": 40
    },
    {
      "question": "How can server-side rendering (SSR) benefit a React application?",
      "options": [
        "Improves performance by reducing the size of the app bundle",
        "Enhances SEO by allowing search engines to crawl the pages more effectively",
        "Eliminates the need for API calls",
        "Automatically secures the application against XSS attacks"
      ],
      "correctOption": 1,
      "points": 40
    },
    {
      "question": "Which React hook should be used to subscribe to a data source in a way that avoids memory leaks?",
      "options": ["useEffect", "useLayoutEffect", "useSubscription", "useMemo"],
      "correctOption": 2,
      "points": 50
    },
    {
      "question": "In React, what technique allows for a smoother user experience by predicting user actions and preparing for them in advance?",
      "options": ["Lazy loading", "Pre-fetching", "Throttling", "Debouncing"],
      "correctOption": 1,
      "points": 50
    },
    {
      "question": "What is the term for when a React component controls the input elements within it, but does not manage their state externally?",
      "options": [
        "Uncontrolled component",
        "Controlled component",
        "Semi-controlled component",
        "None of the above"
      ],
      "correctOption": 2,
      "points": 50
    },
    {
      "question": "Which of the following is not a recommended practice for optimizing React application performance?",
      "options": [
        "Using Immutable data structures",
        "Keeping component state local where necessary",
        "Frequent use of forceUpdate()",
        "Memoizing React components"
      ],
      "correctOption": 2,
      "points": 50
    },
    {
      "question": "How does React 18's startTransition API enhance the user experience in web applications?",
      "options": [
        "By enabling transitions between routes",
        "By allowing developers to mark state updates as non-urgent",
        "By automatically reducing the bundle size",
        "By improving server-side rendering capabilities"
      ],
      "correctOption": 1,
      "points": 50
    },
    {
      "question": "What does the Concurrent Mode in React 18 offer?",
      "options": [
        "Parallel execution of components",
        "Ability to interrupt non-critical rendering tasks",
        "Faster server-side rendering",
        "Concurrent execution of JavaScript and WebAssembly"
      ],
      "correctOption": 1,
      "points": 50
    },
    {
      "question": "Which of the following is a primary advantage of using React Portals?",
      "options": [
        "Improves SEO of the application",
        "Enables rendering components outside the DOM hierarchy of the parent component",
        "Automatically handles component state synchronization",
        "Reduces the overall bundle size of the application"
      ],
      "correctOption": 1,
      "points": 50
    },
    {
      "question": "In the context of React's new features, what is 'Partial Hydration'?",
      "options": [
        "Hydrating only parts of the app that are visible to the user",
        "A new algorithm for faster rehydration of server-rendered apps",
        "Hydrating a component partially based on user interaction",
        "Loading only critical CSS for the initial render"
      ],
      "correctOption": 0,
      "points": 50
    },
    {
      "question": "What problem does the 'useDeferredValue' hook solve in React 18?",
      "options": [
        "Helps defer the rendering of non-urgent updates to improve user experience",
        "Defers API calls until after initial render",
        "Delays the hydration process to speed up initial page load",
        "Allows developers to use deferred rendering techniques for animations"
      ],
      "correctOption": 0,
      "points": 50
    },
    {
      "question": "Which of these is a valid use case for the 'useId' hook in React?",
      "options": [
        "Generating unique identifiers for form elements",
        "Creating unique keys for list items",
        "Identifying React components in DevTools",
        "Assigning unique IDs to server-rendered HTML for hydration"
      ],
      "correctOption": 0,
      "points": 50
    }
  ]
}
